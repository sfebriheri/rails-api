---
openapi: 3.0.1
info:
  title: AI-Powered Job Application Screening Service API
  version: v1
  description: API for intelligent resume and portfolio assessment platform
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  "/api/v1/case_studies":
    get:
      summary: List case studies
      tags:
      - Reference Documents
      description: Retrieve all available case studies for evaluation reference
      parameters:
      - name: page
        in: query
        description: Page number for pagination
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number of items per page
        required: false
        schema:
          type: integer
      - name: difficulty
        in: query
        description: Filter by difficulty level
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                example_0:
                  value:
                    case_studies:
                    - id: 1
                      title: E-commerce API Development
                      description: Build a RESTful API for an e-commerce platform
                        with user authentication, product management, and order processing.
                      difficulty: intermediate
                      requirements:
                      - Ruby on Rails
                      - PostgreSQL
                      - JWT Authentication
                      - API Documentation
                      evaluation_criteria:
                      - Code Quality
                      - API Design
                      - Database Schema
                      - Testing Coverage
                      - Documentation
                      created_at: '2024-01-15T10:00:00.000Z'
                      updated_at: '2024-01-15T10:00:00.000Z'
                    - id: 2
                      title: Real-time Chat Application
                      description: Develop a real-time chat application with WebSocket
                        support, user presence, and message history.
                      difficulty: advanced
                      requirements:
                      - WebSockets
                      - Redis
                      - Background Jobs
                      - Real-time Features
                      evaluation_criteria:
                      - Real-time Implementation
                      - Scalability
                      - Performance
                      - User Experience
                      created_at: '2024-01-14T15:00:00.000Z'
                      updated_at: '2024-01-14T15:00:00.000Z'
                    pagination:
                      current_page: 1
                      total_pages: 3
                      total_count: 25
                      per_page: 10
              schema:
                type: object
                properties:
                  case_studies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        description:
                          type: string
                        difficulty:
                          type: string
                          enum:
                          - beginner
                          - intermediate
                          - advanced
                        requirements:
                          type: array
                          items:
                            type: string
                        evaluation_criteria:
                          type: array
                          items:
                            type: string
                        created_at:
                          type: string
                          format: datetime
                        updated_at:
                          type: string
                          format: datetime
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
    post:
      summary: Create case study
      tags:
      - Reference Documents
      description: Create a new case study for evaluation reference
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              examples:
                example_0:
                  value:
                    id: 3
                    title: E-commerce API Development
                    description: Build a RESTful API for an e-commerce platform with
                      user authentication, product management, and order processing.
                    difficulty: intermediate
                    requirements:
                    - Ruby on Rails
                    - PostgreSQL
                    - JWT Authentication
                    - API Documentation
                    evaluation_criteria:
                    - Code Quality
                    - API Design
                    - Database Schema
                    - Testing Coverage
                    - Documentation
                    created_at: '2024-01-15T12:00:00.000Z'
                    updated_at: '2024-01-15T12:00:00.000Z'
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                  difficulty:
                    type: string
                  requirements:
                    type: array
                    items:
                      type: string
                  evaluation_criteria:
                    type: array
                    items:
                      type: string
                  created_at:
                    type: string
                    format: datetime
                  updated_at:
                    type: string
                    format: datetime
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Validation failed
                    message: Title, description, and difficulty are required
                    details:
                      missing_fields:
                      - title
                      - description
                      - difficulty
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: E-commerce API Development
                description:
                  type: string
                  example: Build a RESTful API for an e-commerce platform...
                difficulty:
                  type: string
                  enum:
                  - beginner
                  - intermediate
                  - advanced
                  example: intermediate
                requirements:
                  type: array
                  items:
                    type: string
                  example:
                  - Ruby on Rails
                  - PostgreSQL
                  - JWT Authentication
                evaluation_criteria:
                  type: array
                  items:
                    type: string
                  example:
                  - Code Quality
                  - API Design
                  - Database Schema
              required:
              - title
              - description
              - difficulty
  "/api/v1/case_studies/{id}":
    parameters:
    - name: id
      in: path
      description: Case study ID
      required: true
      schema:
        type: integer
    get:
      summary: Show case study
      tags:
      - Reference Documents
      description: Retrieve a specific case study by ID
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                example_0:
                  value:
                    id: 1
                    title: E-commerce API Development
                    description: Build a RESTful API for an e-commerce platform with
                      user authentication, product management, and order processing.
                    difficulty: intermediate
                    requirements:
                    - Ruby on Rails
                    - PostgreSQL
                    - JWT Authentication
                    - API Documentation
                    evaluation_criteria:
                    - Code Quality
                    - API Design
                    - Database Schema
                    - Testing Coverage
                    - Documentation
                    detailed_instructions: Create a comprehensive e-commerce API that
                      includes user registration and authentication, product catalog
                      management, shopping cart functionality, and order processing.
                      The API should follow RESTful principles and include proper
                      error handling, validation, and documentation.
                    sample_data:
                      users:
                      - name: John Doe
                        email: john@example.com
                      products:
                      - name: Laptop
                        price: 999.99
                        category: Electronics
                    created_at: '2024-01-15T10:00:00.000Z'
                    updated_at: '2024-01-15T10:00:00.000Z'
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                  difficulty:
                    type: string
                  requirements:
                    type: array
                    items:
                      type: string
                  evaluation_criteria:
                    type: array
                    items:
                      type: string
                  detailed_instructions:
                    type: string
                  sample_data:
                    type: object
                  created_at:
                    type: string
                    format: datetime
                  updated_at:
                    type: string
                    format: datetime
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Case study not found
                    message: No case study found with ID 999
                    details:
                      id: 999
              schema:
                "$ref": "#/components/schemas/Error"
    delete:
      summary: Delete case study
      tags:
      - Reference Documents
      description: Delete a case study by ID
      responses:
        '204':
          description: no content
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Case study not found
                    message: No case study found with ID 999
                    details:
                      id: 999
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v1/upload":
    post:
      summary: Upload documents for evaluation
      tags:
      - Document Upload
      description: Upload CV and project report documents for AI-powered evaluation
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                example_0:
                  value:
                    cv:
                      id: 3
                      filename: sample_cv.pdf
                      file_size: 245760
                      content_type: application/pdf
                      processed: false
                      job_title: Senior Software Engineer
                      created_at: '2024-01-15T10:30:45.123Z'
                      updated_at: '2024-01-15T10:30:45.123Z'
                    project_report:
                      id: 4
                      filename: sample_project_report.pdf
                      file_size: 512000
                      content_type: application/pdf
                      processed: false
                      job_title: Senior Software Engineer
                      created_at: '2024-01-15T10:30:45.456Z'
                      updated_at: '2024-01-15T10:30:45.456Z'
              schema:
                type: object
                properties:
                  cv:
                    "$ref": "#/components/schemas/Document"
                  project_report:
                    "$ref": "#/components/schemas/Document"
                required:
                - cv
        '400':
          description: bad request
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Invalid file format
                    message: Only PDF files are supported
                    details:
                      field: cv
                      issue: invalid_format
              schema:
                "$ref": "#/components/schemas/Error"
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Missing required parameters
                    message: CV file and job title are required
                    details:
                      missing_fields:
                      - cv
                      - job_title
              schema:
                "$ref": "#/components/schemas/Error"
        '413':
          description: payload too large
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: File too large
                    message: File size must be less than 10MB
                    details:
                      max_size: 10MB
                      received_size: 15MB
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: file
        required: true
        description: CV/Resume PDF file
  "/api/v1/evaluate":
    post:
      summary: Trigger evaluation process
      tags:
      - Evaluation Management
      description: Start AI-powered evaluation of uploaded documents
      parameters: []
      responses:
        '202':
          description: evaluation queued
          content:
            application/json:
              examples:
                example_0:
                  value:
                    assessment_id: eca471ee-1841-4f1c-9aae-81645f1a8bc9
                    evaluation_status: queued
              schema:
                type: object
                properties:
                  assessment_id:
                    type: string
                    format: uuid
                    example: eca471ee-1841-4f1c-9aae-81645f1a8bc9
                  evaluation_status:
                    type: string
                    enum:
                    - queued
                    example: queued
                required:
                - assessment_id
                - evaluation_status
        '400':
          description: bad request
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Invalid document ID
                    message: CV document not found
                    details:
                      cv_document_id: 999
              schema:
                "$ref": "#/components/schemas/Error"
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Missing required parameters
                    message: Job title and CV document ID are required
                    details:
                      missing_fields:
                      - job_title
                      - cv_document_id
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                job_title:
                  type: string
                  example: Senior Software Engineer
                cv_document_id:
                  type: integer
                  example: 3
                project_document_id:
                  type: integer
                  example: 4
              required:
              - job_title
              - cv_document_id
  "/api/v1/result/{id}":
    parameters:
    - name: id
      in: path
      format: uuid
      description: Assessment ID
      required: true
      schema:
        type: string
    get:
      summary: Retrieve evaluation results
      tags:
      - Evaluation Management
      description: Get the results of a completed evaluation
      responses:
        '200':
          description: evaluation completed
          content:
            application/json:
              examples:
                example_0:
                  value:
                    assessment_id: eca471ee-1841-4f1c-9aae-81645f1a8bc9
                    evaluation_status: completed
                    resume_compatibility_score: 0.85
                    resume_analysis_feedback: Strong candidate with solid technical
                      foundation. Demonstrates excellent problem-solving skills and
                      code quality. Recommended for next interview round with focus
                      on AI/ML knowledge assessment.
                    portfolio_quality_score: 4
                    portfolio_analysis_feedback: Excellent project structure and implementation.
                      Shows deep understanding of software engineering principles
                      and best practices. Clean code architecture with proper testing
                      coverage.
                    comprehensive_assessment_summary: Highly qualified candidate with
                      strong technical skills and practical experience. Project demonstrates
                      advanced knowledge and professional development practices. Strongly
                      recommend proceeding to technical interview stage.
                    created_at: '2024-01-15T10:30:45.123Z'
                    updated_at: '2024-01-15T10:35:12.456Z'
              schema:
                "$ref": "#/components/schemas/EvaluationJob"
        '202':
          description: evaluation in progress
          content:
            application/json:
              examples:
                example_0:
                  value:
                    assessment_id: eca471ee-1841-4f1c-9aae-81645f1a8bc9
                    evaluation_status: processing
                    estimated_completion: 2-3 minutes
              schema:
                type: object
                properties:
                  assessment_id:
                    type: string
                    format: uuid
                  evaluation_status:
                    type: string
                    enum:
                    - queued
                    - processing
                  estimated_completion:
                    type: string
                    example: 2-3 minutes
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Evaluation not found
                    message: No evaluation found with the provided assessment ID
                    details:
                      assessment_id: invalid-uuid
              schema:
                "$ref": "#/components/schemas/Error"
        '500':
          description: evaluation failed
          content:
            application/json:
              examples:
                example_0:
                  value:
                    assessment_id: eca471ee-1841-4f1c-9aae-81645f1a8bc9
                    evaluation_status: failed
                    error: LLM service temporarily unavailable
                    retry_available: true
              schema:
                type: object
                properties:
                  assessment_id:
                    type: string
                    format: uuid
                  evaluation_status:
                    type: string
                    enum:
                    - failed
                  error:
                    type: string
                  retry_available:
                    type: boolean
  "/api/v1/job_descriptions":
    get:
      summary: List job descriptions
      tags:
      - Reference Documents
      description: Retrieve all available job descriptions for evaluation reference
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                example_0:
                  value:
                  - id: 1
                    title: Senior Software Engineer
                    description: We are looking for an experienced software engineer
                      to join our team...
                    requirements:
                    - 5+ years experience
                    - Ruby on Rails
                    - PostgreSQL
                    - API development
                    created_at: '2024-01-15T10:00:00.000Z'
                    updated_at: '2024-01-15T10:00:00.000Z'
                  - id: 2
                    title: Full Stack Developer
                    description: Join our dynamic team as a full stack developer...
                    requirements:
                    - 3+ years experience
                    - React
                    - Node.js
                    - MongoDB
                    created_at: '2024-01-15T11:00:00.000Z'
                    updated_at: '2024-01-15T11:00:00.000Z'
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/JobDescription"
    post:
      summary: Create job description
      tags:
      - Reference Documents
      description: Create a new job description for evaluation reference
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              examples:
                example_0:
                  value:
                    id: 3
                    title: Senior Software Engineer
                    description: We are looking for an experienced software engineer
                      to join our team...
                    requirements:
                    - 5+ years experience
                    - Ruby on Rails
                    - PostgreSQL
                    - API development
                    created_at: '2024-01-15T12:00:00.000Z'
                    updated_at: '2024-01-15T12:00:00.000Z'
              schema:
                "$ref": "#/components/schemas/JobDescription"
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Validation failed
                    message: Title and description are required
                    details:
                      missing_fields:
                      - title
                      - description
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Senior Software Engineer
                description:
                  type: string
                  example: We are looking for an experienced software engineer...
                requirements:
                  type: array
                  items:
                    type: string
                  example:
                  - 5+ years experience
                  - Ruby on Rails
                  - PostgreSQL
              required:
              - title
              - description
  "/api/v1/job_descriptions/{id}":
    parameters:
    - name: id
      in: path
      description: Job description ID
      required: true
      schema:
        type: integer
    get:
      summary: Show job description
      tags:
      - Reference Documents
      description: Retrieve a specific job description by ID
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                example_0:
                  value:
                    id: 1
                    title: Senior Software Engineer
                    description: We are looking for an experienced software engineer
                      to join our team...
                    requirements:
                    - 5+ years experience
                    - Ruby on Rails
                    - PostgreSQL
                    - API development
                    created_at: '2024-01-15T10:00:00.000Z'
                    updated_at: '2024-01-15T10:00:00.000Z'
              schema:
                "$ref": "#/components/schemas/JobDescription"
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Job description not found
                    message: No job description found with ID 999
                    details:
                      id: 999
              schema:
                "$ref": "#/components/schemas/Error"
    delete:
      summary: Delete job description
      tags:
      - Reference Documents
      description: Delete a job description by ID
      responses:
        '204':
          description: no content
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Job description not found
                    message: No job description found with ID 999
                    details:
                      id: 999
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v1/scoring_rubrics":
    get:
      summary: List scoring rubrics
      tags:
      - Reference Documents
      description: Retrieve all available scoring rubrics for evaluation reference
      parameters:
      - name: page
        in: query
        description: Page number for pagination
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number of items per page
        required: false
        schema:
          type: integer
      - name: category
        in: query
        description: Filter by category
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                example_0:
                  value:
                    scoring_rubrics:
                    - id: 1
                      name: Software Engineering Assessment
                      description: Comprehensive rubric for evaluating software engineering
                        skills and project quality
                      category: technical-assessment
                      criteria:
                      - name: Code Quality
                        weight: 0.3
                        levels:
                        - score: 1
                          description: Poor code structure, no documentation
                        - score: 2
                          description: Basic code structure, minimal documentation
                        - score: 3
                          description: Good code structure, adequate documentation
                        - score: 4
                          description: Excellent code structure, comprehensive documentation
                      - name: Problem Solving
                        weight: 0.25
                        levels:
                        - score: 1
                          description: Limited problem-solving approach
                        - score: 2
                          description: Basic problem-solving skills
                        - score: 3
                          description: Strong problem-solving abilities
                        - score: 4
                          description: Exceptional problem-solving and innovation
                      created_at: '2024-01-15T10:00:00.000Z'
                      updated_at: '2024-01-15T10:00:00.000Z'
                    pagination:
                      current_page: 1
                      total_pages: 2
                      total_count: 15
                      per_page: 10
              schema:
                type: object
                properties:
                  scoring_rubrics:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
                        category:
                          type: string
                        criteria:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              weight:
                                type: number
                              levels:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    score:
                                      type: integer
                                    description:
                                      type: string
                        created_at:
                          type: string
                          format: datetime
                        updated_at:
                          type: string
                          format: datetime
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
    post:
      summary: Create scoring rubric
      tags:
      - Reference Documents
      description: Create a new scoring rubric for evaluation reference
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              examples:
                example_0:
                  value:
                    id: 2
                    name: Software Engineering Assessment
                    description: Comprehensive rubric for evaluating software engineering
                      skills and project quality
                    category: technical-assessment
                    criteria:
                    - name: Code Quality
                      weight: 0.3
                      levels:
                      - score: 1
                        description: Poor code structure, no documentation
                      - score: 4
                        description: Excellent code structure, comprehensive documentation
                    created_at: '2024-01-15T12:00:00.000Z'
                    updated_at: '2024-01-15T12:00:00.000Z'
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  category:
                    type: string
                  criteria:
                    type: array
                  created_at:
                    type: string
                    format: datetime
                  updated_at:
                    type: string
                    format: datetime
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Validation failed
                    message: Name, description, category, and criteria are required
                    details:
                      missing_fields:
                      - name
                      - description
                      - category
                      - criteria
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Software Engineering Assessment
                description:
                  type: string
                  example: Comprehensive rubric for evaluating software engineering
                    skills...
                category:
                  type: string
                  example: technical-assessment
                criteria:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      weight:
                        type: number
                      levels:
                        type: array
                        items:
                          type: object
                          properties:
                            score:
                              type: integer
                            description:
                              type: string
              required:
              - name
              - description
              - category
              - criteria
  "/api/v1/scoring_rubrics/{id}":
    parameters:
    - name: id
      in: path
      description: Scoring rubric ID
      required: true
      schema:
        type: integer
    get:
      summary: Show scoring rubric
      tags:
      - Reference Documents
      description: Retrieve a specific scoring rubric by ID
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                example_0:
                  value:
                    id: 1
                    name: Software Engineering Assessment
                    description: Comprehensive rubric for evaluating software engineering
                      skills and project quality
                    category: technical-assessment
                    criteria:
                    - name: Code Quality
                      weight: 0.3
                      description: Evaluate the overall quality, structure, and maintainability
                        of the code
                      levels:
                      - score: 1
                        description: Poor code structure, no documentation, inconsistent
                          style
                        examples:
                        - No comments
                        - Inconsistent naming
                        - Poor organization
                      - score: 4
                        description: Excellent code structure, comprehensive documentation,
                          consistent style
                        examples:
                        - Clear comments
                        - Consistent naming
                        - Well-organized modules
                    usage_guidelines: Use this rubric to evaluate technical projects
                      and coding assignments. Each criterion should be scored independently,
                      and the final score is calculated using the weighted average.
                    created_at: '2024-01-15T10:00:00.000Z'
                    updated_at: '2024-01-15T10:00:00.000Z'
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  category:
                    type: string
                  criteria:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        weight:
                          type: number
                        description:
                          type: string
                        levels:
                          type: array
                          items:
                            type: object
                            properties:
                              score:
                                type: integer
                              description:
                                type: string
                              examples:
                                type: array
                                items:
                                  type: string
                  usage_guidelines:
                    type: string
                  created_at:
                    type: string
                    format: datetime
                  updated_at:
                    type: string
                    format: datetime
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Scoring rubric not found
                    message: No scoring rubric found with ID 999
                    details:
                      id: 999
              schema:
                "$ref": "#/components/schemas/Error"
    delete:
      summary: Delete scoring rubric
      tags:
      - Reference Documents
      description: Delete a scoring rubric by ID
      responses:
        '204':
          description: no content
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error: Scoring rubric not found
                    message: No scoring rubric found with ID 999
                    details:
                      id: 999
              schema:
                "$ref": "#/components/schemas/Error"
servers:
- url: http://localhost:3000
  description: Development server
- url: https://api.example.com
  description: Production server
components:
  schemas:
    Document:
      type: object
      properties:
        id:
          type: integer
          example: 1
        filename:
          type: string
          example: resume.pdf
        file_size:
          type: integer
          example: 245760
        content_type:
          type: string
          example: application/pdf
        processed:
          type: boolean
          example: false
        job_title:
          type: string
          example: Senior Software Engineer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - filename
      - file_size
      - content_type
      - processed
    EvaluationJob:
      type: object
      properties:
        assessment_id:
          type: string
          format: uuid
          example: eca471ee-1841-4f1c-9aae-81645f1a8bc9
        evaluation_status:
          type: string
          enum:
          - queued
          - processing
          - completed
          - failed
          example: completed
        resume_compatibility_score:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          example: 0.85
        resume_analysis_feedback:
          type: string
          example: Strong technical background with relevant experience...
        portfolio_quality_score:
          type: integer
          minimum: 1
          maximum: 5
          example: 4
        portfolio_analysis_feedback:
          type: string
          example: Well-structured project demonstrating good practices...
        comprehensive_assessment_summary:
          type: string
          example: Highly qualified candidate recommended for interview...
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - assessment_id
      - evaluation_status
    JobDescription:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Senior Software Engineer
        description:
          type: string
          example: We are looking for an experienced software engineer...
        requirements:
          type: array
          items:
            type: string
          example:
          - 5+ years experience
          - Ruby on Rails
          - PostgreSQL
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - title
      - description
    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid request parameters
        message:
          type: string
          example: The uploaded file must be a PDF
        details:
          type: object
          example:
            field: cv
            issue: invalid_format
      required:
      - error
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
